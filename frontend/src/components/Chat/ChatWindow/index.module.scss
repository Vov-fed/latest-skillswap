.chatWindowContainer {
  display: flex;
  flex-direction: column;
  height: fit-content;
  min-height: 100vh;
  justify-content: end;
  background: #f4f6fa;
  border-left: 1px solid #e0e7ef;
  position: relative;
  @media (max-width: 900px) {
    border-radius: 8px 8px 0 0;
    max-width: 100%;
    &.fullWidth {
      width: 100%;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      border-radius: 0;
      border: none;
      box-shadow: none;
    }
  }
}

.chatHeader{
  position: fixed;
  top: 65px;
  width: 330px;
  right: 0;
  border-bottom:  1px solid #e0e7ef;
  display: flex;
  align-items: center;
  padding: 12px 20px;
  justify-content: start;
  gap: 12px;
  z-index: 900;
  @media (max-width: 900px) {
    border-radius:  8px 8px 0 0;
    width: calc(90vw - 40px);
    top: 0;
  }
  img{
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 12px;
    object-fit: cover;
  }
  &.fullWidthHeader{
    width: calc(100vw - 410px);
    padding: 12px 20px;
    @media (max-width: 900px) {
      width: calc(100vw - 40px);
      top: 60px;
    }
  }
}
.fullWidth {
  position: absolute;
  top: 60px;
  right: 0;
  width: calc(100vw - 370px);
}

.chatWindowEmpty {
  padding: 20px;
  color: #888;
  text-align: center;
  font-size: 1.08rem;
}

.chatMessage {
  display: flex;
  flex-direction: column;
  align-self: flex-start;
  max-width: 77%;
  margin-left: 18px;
  background: #e5fddc;
  border-radius: 1.1em 1.1em 1.1em 0.33em;
  padding: 11px 17px 7px 15px;
  box-shadow: 0 2px 10px rgba(33,52,85,0.07);
  position: relative;
  font-size: 1.03rem;
  transition: background 0.15s;

  .emojiPicker {
  position: absolute;
  bottom: 40px;
  background: #fff;
  border: 1.5px solid #dde3ec;
  box-shadow: 0 4px 18px rgba(38,66,113,0.14);
  border-radius: 13px;
  padding: 7px 9px;
  z-index: 30;
  display: flex;
  gap: 7px;
  
  span{
    font-size: 22px;
    margin: 0 4px;
    cursor: pointer;
    font-size: 1.2rem;
    transition: transform 0.14s;
    &:hover {
      transform: scale(1.2);
    }
  }
  }
}

.chatMessageSelf{
  box-shadow: 0 2px 10px rgba(33,52,85,0.15);
  .emojiPicker {
    bottom: 40px;
    right: 20px;
  }
}

.chatMessageSelf {
  background: #e6f2ff;
  align-self: flex-end;
  border-radius: 1.1em 1.1em 0.33em 1.1em;
  margin-right: 18px;
  margin-left: 0;
}

.chatMessageSender {
  font-size: 12px;
  color: #5473a8;
  font-weight: 500;
  margin-bottom: 2px;
  opacity: 0.88;
}

.chatMessageText {
  font-size: 1.04rem;
  margin-bottom: 4px;
  word-break: break-word;
}

.chatMessageTime {
  font-size: 11px;
  color: #b1b5be;
  text-align: right;
  margin-top: 4px;
}

.reactionBar {
  display: flex;
  align-items: center;
  margin-top: 2px;
  gap: 4px;
  min-height: 27px;
}
.reactionAvatars {
  display: inline-flex;
  align-items: center;
  gap: 0; /* We'll use overlap instead of gap */
  margin-left: 7px; // slight separation from the emoji
}

.emojiAvatar {
  width: 19px;
  height: 19px;
  border-radius: 50%;
  object-fit: cover;
  background: #eee;
  margin-left: -13px;
  box-shadow: 0 0.5px 2px rgba(0,0,0,0.06);
  transition: border 0.13s;
  border: 1px solid transparent;
  &:first-child {
    margin-left: 0;
  }
}

/* Optional: highlight your own avatar with a blue border */
.reaction,
.reactionMine {
  padding: 4px 4px;
  background: #00000016;
  border-radius: 1em;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.07rem;
  cursor: pointer;
  user-select: none;
  min-width: 28px;
  transition: transform 0.14s;
  text-align: center;
  &:hover {
    transform: scale(1.1);
  }
}

.reactionMine {
  background: #579af3;
}

.reactionAdd {
  // color: #8fa1be;
  border-radius: 50%;
  background: #f7f9fc;
  border: 1px solid #e0e6ed;
  width: 20px;
  height: 20px;
  margin-left: 6px;
  cursor: pointer;
  position: relative;
  transition: background 0.14s;
  &::before,
  &::after {
    content: '';
    position: absolute;
    top: calc(50% + 1px);
    transition: background 0.14s, top 0.14s, transform 0.14s;
    border-radius: 2px;
    width: 10px;
    height: 2px;
    background: #8fa1be;
  }
  &::before {
    left: 10%;
    transform: translate(0%, -50%) rotate(45deg);
  }
  &::after {
    right: 10%;
    transform: translate(0%, -50%) rotate(-45deg);
  }
  &.active {
    &::before{
      background: #1976d2;
      top: calc(50% - 1px);
      transform: translate(0%, -50%) rotate(-45deg);
    }
    &::after{
      background: #1976d2;
      top: calc(50% - 1px);
      transform: translate(0%, -50%) rotate(45deg);
    }
  }
}

.reactionAdd:hover {
  background: #e8f0fb;
}

.chatInputContainer {
  display: flex;
  align-items: center;
  padding: 12px 14px 14px 12px;
  border-top: 1.5px solid #e0e7ef;
  background: #fcfdff;
  gap: 9px;
}

.chatInput {
  flex: 1;
  border: none;
  border-radius: 9px;
  padding: 12px 17px;
  font-size: 1.12rem;
  background: #f4f7fc;
  margin-right: 0px;
  outline: none;
  transition: box-shadow 0.16s;
  box-shadow: 0 1px 2px rgba(0,0,0,0.02);
}

.chatInput:focus {
  background: #fff;
  box-shadow: 0 2px 7px rgba(31,108,188,0.08);
}

.chatSendButton {
  background: #1976d2;
  color: #fff;
  border: none;
  padding: 0.75em 1.3em;
  border-radius: 7px;
  font-weight: 600;
  font-size: 1.04rem;
  cursor: pointer;
  transition: background 0.18s;
}

.chatSendButton:disabled {
  background: #b3b8c1;
  cursor: not-allowed;
}

@media (max-width: 600px) {
  .chatWindowContainer {
    border-left: none;
    min-width: 0;
    width: 100vw;
  }
  .chatMessage, .chatMessageSelf {
    max-width: 90vw;
    margin-left: 8px;
    margin-right: 8px;
  }
}

@keyframes reaction-pop {
  0% { transform: scale(1); opacity: 0;}
  30% { transform: scale(1.27); opacity: 0.3;}
  55% { transform: scale(0.93); opacity: 0.55;}
  80% { transform: scale(1.10); opacity: 0.8;}
  100% { transform: scale(1); opacity: 1; }
}
.reactionPop {
  animation: reaction-pop 0.44s cubic-bezier(.42,0,.58,1.13);
}

.statusIcon {
  margin-left: 7px;
  vertical-align: middle;
  svg {
    vertical-align: middle;
  }
}


.backButton{
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
  margin-right: 12px;
  transition: color 0.16s;
  color: #1976d2;
  &:hover {
    color: #125bb1;
  }
  svg {
    width: 20px;
    height: 20px;
  }
}
// import React, { useEffect, useState, useRef } from "react";
// import { getMessages, sendMessage, reactToMessage, removeReaction } from "../../../services/chatAndMessageApi";
// import styles from "./index.module.scss";
// import { getUserIdByToken } from "../../../services/userApi";
// import { useSocket } from "../../../services/useSocket";


// interface ChatWindowProps {
//   chat: any;
//   onBack: () => void;
//   onClose: () => void;
// }

// const ChatWindow: React.FC<ChatWindowProps> = ({ chat, onBack, onClose}) => {
//   const currentUser = getUserIdByToken();
//   const [messages, setMessages] = useState<any[]>([]);
//   const [loading, setLoading] = useState(false);
//   const [input, setInput] = useState("");
//   const emojiOptions = ["👍", "😂", "🎉", "❤️", "😮", "😢", "🔥"];
//   const [sending, setSending] = useState(false);
//   const messagesEndRef = useRef<HTMLDivElement>(null);
//   const [activeMsgId, setActiveMsgId] = useState<string | null>(null);
//   const [poppedReaction, setPoppedReaction] = useState<{msgId: string, emoji: string} | null>(null);
//   const socket = useSocket();
//   const userId = getUserIdByToken();
//   useEffect(() => {
//   if (socket && chat?._id) {
//     socket.emit("joinChat", { chatId: chat._id, userId });
//     return () => {
//       socket.emit("leaveChat", chat._id);
//     };
//   }
// }, [socket, chat]);

//   useEffect(() => {
//     setLoading(true);
//     getMessages(chat._id)
//       .then(setMessages)
//       .finally(() => setLoading(false));
//   }, [chat]);
// useEffect(() => {
//   if (!socket || !chat?._id) return;

//   const handleMessageUpdated = async (msg: any) => {
//     setMessages(prev => {
//       const prevMsg = prev.find(m => m._id === msg._id);
//       if (prevMsg) {
//         // Compare reactions to detect changes
//         const prevReactions = Array.isArray(prevMsg.reactions) ? prevMsg.reactions : [];
//         const newReactions = Array.isArray(msg.reactions) ? msg.reactions : [];
//         for (const newReaction of newReactions) {
//           const prevReaction = prevReactions.find(r => r.emoji === newReaction.emoji);
//           const prevUsers = prevReaction ? prevReaction.users.map((u: any) => u._id).sort() : [];
//           const newUsers = newReaction.users.map((u: any) => u._id).sort();
//           if (prevUsers.length !== newUsers.length || prevUsers.some((id, i) => id !== newUsers[i])) {
//             setPoppedReaction({ msgId: msg._id, emoji: newReaction.emoji });
//             setTimeout(() => setPoppedReaction(null), 480);
//             break;
//           }
//         }
//       }
//       return prev.map(m => m._id === msg._id ? msg : m);
//     });
//     setPickerOpenFor(msg._id)
//     setTimeout(() => {
//       setPickerOpenFor("");
//     }
//     , 100);
//   };

// const handleNewMessage = (msg: any) => {
//   setMessages(prev => {
//     // Remove any optimistic message that matches this real message by tempId (if present)
//     const filtered = prev.filter(m => {
//       // If both messages have tempId and they match, remove the optimistic one
//       if (m.tempId && msg.tempId && m.tempId === msg.tempId) {
//         return false;
//       }
//       // Or, fallback: remove by text, sender, and very close createdAt
//       const isOptimistic =
//         m.status === "sending" &&
//         m.text === msg.text &&
//         (typeof m.sender === "string"
//           ? m.sender
//           : m.sender?._id) ===
//           (typeof msg.sender === "string"
//             ? msg.sender
//             : msg.sender?._id) &&
//         Math.abs(new Date(m.createdAt).getTime() - new Date(msg.createdAt).getTime()) < 15000;
//       if (isOptimistic) {
//         return false;
//       }
//       // Otherwise, keep the message
//       return m._id !== msg._id;
//     });
//     return [...filtered, msg];
//   });
// };
//   socket.on("messageUpdated", handleMessageUpdated);
//   socket.on("newMessage", handleNewMessage);

//   return () => {
//     socket.off("messageUpdated", handleMessageUpdated);
//     socket.off("newMessage", handleNewMessage);
//   };
// }, [socket, chat]);

//   useEffect(() => {
//     if (messagesEndRef.current) {
//       messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
//     }
//   }, [messages]);

//   useEffect(() => {
//   if (!activeMsgId) return;

//   const handler = (e: MouseEvent | KeyboardEvent) => {
//     setActiveMsgId(null);
//   };

//   document.addEventListener("click", handler);
//   document.addEventListener("keydown", (e) => {
//     if ((e as KeyboardEvent).key === "Escape") handler(e);
//   });

//   return () => {
//     document.removeEventListener("click", handler);
//     document.removeEventListener("keydown", handler);
//   };
// }, [activeMsgId]);

//   const handleSend = async (e: React.FormEvent) => {
//     e.preventDefault();
//     const trimmed = input.trim();
//     if (!trimmed) return;
//     setSending(true);

//     try {
//   const tempId = Date.now().toString();
//   const tempMsg = {
//         _id: "temp-" + tempId,
//         tempId,
//         text: trimmed,
//         sender: { _id: currentUser, name: "You" },
//         createdAt: new Date().toISOString(),
//         status: "sending",
//       };
//       setMessages((prev) => [...prev, tempMsg]);
//       setInput("");
//       // Send to backend
//       await sendMessage({ chatId: chat._id, text: trimmed, tempId });
//       // No need to replace optimistic message; socket will handle final message
//     } catch (err) {
//       console.log("Failed to send message:", err);
//     } finally {
//       setSending(false);
//     }
//   };

// const handleReact = async (msgId: string, reaction: string) => {
//   try {
//     // Await the updated message with new reactions
//     await reactToMessage(msgId, reaction);
//     // No direct local update; rely on socket event for state change
//   } catch (e) {
//     console.log("Failed to react:", e);
//   }
// };
// const handleRemove = async (msgId: string, emoji: string) => {
//   try {
//     await removeReaction(msgId, emoji);
//     // No direct local update; rely on socket event for state change
//   } catch (e) {
//     console.log("Failed to remove reaction:", e);
//   }
// };
//   return (
//     <div className={styles.chatWindowContainer}>
//       {loading ? (
//         <div className={styles.chatWindowEmpty}>Loading messages...</div>
//       ) : (
//         <>
//           <div className={styles.chatMessages}>
//             {messages.length === 0 ? (
//               <div className={styles.chatWindowEmpty}>No messages yet.</div>
//             ) : (
//                 messages.map(msg => {
//                 const senderId =
//                     typeof msg.sender === "string"
//                     ? msg.sender
//                     : msg.sender?._id;
//                 const isMine = senderId === currentUser;
                  
//                 const reactions = Array.isArray(msg.reactions) ? msg.reactions : [];
//                 return (
//                 <div key={msg._id} className={isMine ? `${styles.chatMessage} ${styles.chatMessageSelf}` : styles.chatMessage} onContextMenu={e => { e.preventDefault(); setActiveMsgId(msg._id);}}>
//                     <div className={styles.chatMessageSender}>{msg.sender?.name || "You"}</div>
//                     <div className={styles.chatMessageText}>{msg.text}</div>
//                     <div className={styles.chatMessageTime}>
//                         {new Date(msg.createdAt).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
//                                           </div>
//                     { reactions.length > 0 && (
//                       <div className={styles.reactionBar}>
//                         {reactions.map(reaction => {
//                           const mine = reaction.users.map((u: any) => u._id).includes(currentUser);
//                           const isPopped = poppedReaction?.msgId === msg._id && poppedReaction?.emoji === reaction.emoji;
//                           return (
//                             <span
//                               key={reaction.emoji}
//                               onClick={() => {
//                                 if (mine) {
//                                   handleRemove(msg._id, reaction.emoji);
//                                 } else {
//                                   handleReact(msg._id, reaction.emoji);
//                                 }
                                
//                               }}
//                               className={
//                                 mine
//                                   ? `${styles.reaction} ${styles.reactionMine} ${isPopped ? styles.reactionPop : ""}`
//                                   : (isPopped ? `${styles.reaction} ${styles.reactionPop}` : styles.reaction)
//                               }
//                               title={mine ? "Remove your reaction" : "React"}>
//                               {reaction.emoji}
//                               <div className={styles.reactionAvatars}>
//                               {reaction.users.length < 3 ?
//                                 reaction.users.map((user: any) => {
//                                   return (
//                                     <img key={`img-${user._id}`} src={user.profilePicture
//                                       ? user.profilePicture
//                                       : "https://upload.wikimedia.org/wikipedia/commons/thumb/1/12/User_icon_2.svg/1200px-User_icon_2.svg.png"
//                                     } alt="hehe" className={styles.emojiAvatar}/>
//                                   );
//                                 }
//                               ) : null}
//                               </div>
//                             </span>
//                           );
//                         })}
//                       </div>
//                     )}
//                       {activeMsgId === msg._id && (
//                         <div className={styles.emojiPicker}>
//                           {emojiOptions.map(emoji => (
//                             <span
//                               key={emoji}
//                               onClick={() => handleReact(msg._id, emoji)}
//                             >
//                               {emoji}
//                             </span>
//                           ))}
//                         </div>
//                         )}
//                     </div>
//                 );
                  
//               })
//             )}
//             <div ref={messagesEndRef} />
//           </div>
//           <form className={styles.chatInputContainer} onSubmit={handleSend}>
//             <input
//               className={styles.chatInput}
//               value={input}
//               onChange={e => setInput(e.target.value)}
//               placeholder="Type a message…"
//               disabled={sending}
//               autoFocus
//               onKeyDown={e => {
//                 if (e.key === "Enter" && !e.shiftKey) {
//                   handleSend(e as any);
//                 }
//               }}
//             />
//             <button
//               className={styles.chatSendButton}
//               type="submit"
//               disabled={sending || !input.trim()}
//             >
//               Send
//             </button>
//           </form>
//         </>
//       )}
//     </div>
//   );
// };

// export default ChatWindow;